Time series Forecasting Model Web Application

This project is a web application for performing time series forecasting using various models. It utilizes Python for the backend and React, D3.js, HTML, and CSS for the frontend.
## Models development 
-ARIMA Configuration and Tuning
-ANN Design and Training
-SARIMA (Seasonal ARIMA)
-Exponential Smoothing (ETS)
-Prophet
-Support Vector Regression (SVR)
-Long Short-Term Memory (LSTM)
-Hybrid Models Integration:
• Purpose Combining ARIMA and ANN models leverages ARIMA's proficiency in capturing linear
relationships and ANN's ability to model complex patterns. This integration aims to enhance overall
forecast accuracy by handling residuals effectively.
• Process: Use the forecast results from the ARIMA model as input features to the ANN, which then
models the residuals. This step is crucial as it allows the ANN to correct and improve the predictions
based on the errors generated by the ARIMA model.

## Features

- User-friendly interface to select datasets and forecasting models.
- Integration with D3.js for interactive data visualization.
- Backend powered by SQLite for data storage and retrieval.
- Easy setup and execution using Python.

## Technologies Used

- Python: Used for the backend logic, including data processing, model training, and database management.
- React: Used for building dynamic and interactive user interfaces.
- D3.js: Used for data visualization and creating interactive charts.
- HTML: Used for structuring the web pages.
- CSS: Used for styling the web pages and providing a visually appealing layout.
- SQLite: Used as the database management system for storing datasets and model results.

## Installation
1. Clone and Navigate to the project directory:
cd forecasting-model
2. Install Python dependencies:
pip install -r requirements.txt
4. Install Node.js and npm (if not already installed).
5. Navigate to the frontend directory and install npm packages:
cd frontend
npm install

## Usage
1. Run the Flask server for the backend: 
	python app.py
2. Open your web browser and navigate to `http://localhost:5000` to access the web application.
3. Select a dataset and choose a forecasting model from the dropdown menus.
4. Click the "Submit" button to view the forecast results and visualizations.

##Contributors:
Kisaa Fatima
Areeba Riaz

